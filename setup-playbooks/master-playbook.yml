---
- hosts: all
  become: true
  tasks:

    ## apt dependencies ##
    - name: Install packages needed for apt HTTPS connexion
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        

    ## Docker installation ##
    - name: Download apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install docker and its dependecies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
      notify:
        - docker status
    
    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker

    
    ## Installing K8s ##

    # swap needs to be disabled in order for kubelet to function correctly
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      #when: ansible_swaptotal_mb > 0

    - name: Download apt signing key for K8s
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install K8s binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl


    ## K8s configuration ##
    - name: Configure node ip
      lineinfile:
        path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        line: Environment="KUBELET_EXTRA_ARGS=--node-ip='{{ node_ip }}'"

    - name: Restart kubelet for node IP to register
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    
    # Removing containerd config due to issues on ubuntu 20 (https://forum.linuxfoundation.org/discussion/862825/kubeadm-init-error-cri-v1-runtime-api-is-not-implemented)
    - name: Remove containerd configuration
      command: rm /etc/containerd/config.toml

    - name: Restart containerd
      #command: systemctl restart containerd
      service:
        name: containerd
        daemon_reload: yes
        state: restarted

    # Initialize the K8s cluster with kubeadm
    - name: Initialize the K8s cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address='{{ node_ip }}' --apiserver-cert-extra-sans='{{ node_ip }}' --node-name k8s-master --pod-network-cidr=192.168.0.0/16
      # sudo kubeadm init --apiserver-advertise-address='192.168.56.10' --apiserver-cert-extra-sans='192.168.56.10' --node-name k8s-master --pod-network-cidr=192.168.0.0/16

    # Allow vagrant user to access the K8s cluster in the kubeconfig file
    - name: Allow vagrant user to access kubeconfig
      command: "{{ item }}"
      with_items:
        - mkdir -p /home/vagrant/.kube
        - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        - chown vagrant:vagrant /home/vagrant/.kube/config

    # Setup the container networking provider that allows nodes and master to communicate securely
    - name: Install calico pod network
      become: false
      command: kubectl create -f https://docs.projectcalico.org/manifests/calico.yaml

    # Generate kube join command for joining the node to the K8s cluster
    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join command to local file
      copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: "./join-command"

    # The join command needs to be exported to the local machine so that it can be sent later to worker nodes
    - name: fetch the file to the local machine
      fetch: 
        src: "./join-command"
        dest: "./join-command"

  # Handler for checking Docker daemon
  handlers:
    - name: docker status
      service: name=docker state=started